<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Global Weather Assistant for All Cities</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #6dd5ed, #2193b0);
      color: #fff;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    .container {
      background: rgba(0, 0, 0, 0.5);
      padding: 30px;
      padding-right: 3.5%;
      border-radius: 15px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      max-width: 600px;
      width: 90%;
    }
    h1 {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 10px;
      font-size: 18px;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border: 2px solid #fff;
      border-radius: 5px;
      outline: none;
      background: rgba(255, 255, 255, 0.8);
      color: #333;
      margin-bottom: 20px;
      transition: border-color 0.3s;
    }
    input[type="text"]:focus {
      border-color: #2193b0;
    }
    button {
      background-color: #2193b0;
      border: none;
      color: #fff;
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
      margin-right: 10px; /* Space between buttons */
    }
    button:hover {
      background-color: #1b7aa8;
      transform: scale(1.05);
    }
    button:active {
      transform: scale(1);
    }
    /* Red Clear Button */
    .clear-button {
      background-color: #e74c3c;
    }
    .clear-button:hover {
      background-color: #c0392b;
    }
    /* Loader styles */
    .loader {
      display: none; /* Hidden by default */
      margin-top: 20px;
      justify-content: center;
    }
    .loader span {
      display: inline-block;
      width: 10px;
      height: 10px;
      margin: 5px;
      background: #fff;
      border-radius: 50%;
      animation: loader 1.2s infinite ease-in-out;
    }
    .loader span:nth-child(2) {
      animation-delay: 0.2s;
    }
    .loader span:nth-child(3) {
      animation-delay: 0.4s;
    }
    @keyframes loader {
      0%, 80%, 100% {
        transform: scale(0);
      }
      40% {
        transform: scale(1);
      }
    }
    /* Response Section Styles */
    #responseSection {
      margin-top: 20px;
      padding: 20px;
      background: rgba(255, 255, 255, 0.8);
      color: #333;
      border-radius: 10px;
      text-align: left;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    pre {
      white-space: pre-wrap; /* Ensure text wraps within the block */
      word-wrap: break-word;
      margin: 0;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Global Weather Assistant for All Cities</h1>
    <form id="weatherForm">
      <label for="query">Enter your query:</label>
      <input type="text" id="query" name="query" placeholder="e.g., What's the weather in New York?" required />
      <button type="submit">Send</button>
      <button type="button" class="clear-button" id="clearButton">Clear</button>
    </form>
    <!-- Loader -->
    <div class="loader" id="loader">
      <span></span>
      <span></span>
      <span></span>
    </div>
    <!-- Response Section -->
    <div id="responseSection" style="display: none;">
      <h2>Response:</h2>
      <pre id="responseText"></pre>
    </div>
  </div>

  <script>
    let threadIds = ""; // Variable to store the thread ID

    // Initialize the thread when the page loads
    async function initializeThread() {
      try {
        const response = await fetch("/thread");
        const data = await response.json();
        threadIds = data.threadId; // Store the thread ID
        console.log("Thread ID:", threadIds);
      } catch (error) {
        alert("Failed to create a new thread. Please try again.");
      }
    }

    // Call initializeThread on page load
    window.onload = initializeThread;

    const form = document.getElementById("weatherForm");
    const loader = document.getElementById("loader");
    const responseSection = document.getElementById("responseSection");
    const responseText = document.getElementById("responseText");
    const clearButton = document.getElementById("clearButton");

    form.addEventListener("submit", async (event) => {
      event.preventDefault(); // Prevent default form submission
      loader.style.display = "flex"; // Show the loader
      responseSection.style.display = "none"; // Hide the response section

      const query = document.getElementById("query").value;
      console.log("Query:", query);
      try {
        const response = await fetch("/chat", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            threadId: threadIds,
            message: query,
          }),
        });

        const result = await response.json();
        loader.style.display = "none"; // Hide the loader
        responseSection.style.display = "block"; // Show the response section
        responseText.textContent = result.response; // Update the response text
      } catch (error) {
        console.error("Error fetching response:", error);
        loader.style.display = "none";
        responseSection.style.display = "block";
        responseText.textContent = "An error occurred. Please try again.";
      }
    });

    // Clear button functionality
    clearButton.addEventListener("click", () => {
      document.getElementById("query").value = ''; // Clear the input field
      responseSection.style.display = "none"; // Hide the response section
      loader.style.display = "none"; // Hide the loader
    });
  </script>
</body>
</html>
